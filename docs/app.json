[{"name": "app.py", "content": "# app.py\nfrom shiny import App, ui, render, reactive\nimport pandas as pd\nimport numpy as np\nimport datetime\nimport matplotlib.pyplot as plt\n\n# --------------------------\n# Estaciones\nstations = [\"ANTENA\", \"CENTRAL\", \"RELAVERA\", \"CHAVIN\"]\n\n# --------------------------\n# UI\napp_ui = ui.page_fluid(\n    ui.h2(\"Dashboard Pron\u00f3stico del Tiempo\"),\n    \n    ui.input_select(\"station_selected\", \"Selecciona la estaci\u00f3n:\", {s: s for s in stations}),\n    \n    ui.br(),\n\n    ui.row(\n        ui.column(6, ui.output_plot(\"plot_precip\")),\n        ui.column(6, ui.output_plot(\"plot_tmed\"))\n    ),\n    ui.row(\n        ui.column(6, ui.output_plot(\"plot_tmax\")),\n        ui.column(6, ui.output_plot(\"plot_tmin\"))\n    )\n)\n\n# --------------------------\n# Server\ndef server(input, output, session):\n\n    # \u26a1 Ahora controlamos con input.station_selected\n    @reactive.calc\n    def df():\n        today = datetime.date.today()\n        dates = [today + datetime.timedelta(days=i) for i in range(1, 6)]\n        np.random.seed(hash(input.station_selected()) % 2**32)  # genera siempre lo mismo por estaci\u00f3n\n        return pd.DataFrame({\n            \"Fecha\": dates,\n            \"Precipitacion (mm)\": np.random.uniform(0, 20, 5),\n            \"Tmed\": np.random.uniform(5, 20, 5),\n            \"Tmax\": np.random.uniform(15, 30, 5),\n            \"Tmin\": np.random.uniform(0, 10, 5)\n        })\n\n    @output\n    @render.plot\n    def plot_precip():\n        data = df()\n        fig, ax = plt.subplots()\n        ax.bar(data[\"Fecha\"].astype(str), data[\"Precipitacion (mm)\"])\n        ax.set_title(f\"Precipitaci\u00f3n - {input.station_selected()}\")\n        ax.set_xlabel(\"Fecha\")\n        ax.set_ylabel(\"Precipitaci\u00f3n (mm)\")\n        plt.xticks(rotation=45)\n        return fig\n\n    @output\n    @render.plot\n    def plot_tmed():\n        data = df()\n        fig, ax = plt.subplots()\n        ax.plot(data[\"Fecha\"], data[\"Tmed\"], marker=\"o\")\n        ax.set_title(f\"Temperatura Media - {input.station_selected()}\")\n        ax.set_xlabel(\"Fecha\")\n        ax.set_ylabel(\"Temperatura Media (\u00b0C)\")\n        plt.xticks(rotation=45)\n        return fig\n\n    @output\n    @render.plot\n    def plot_tmax():\n        data = df()\n        fig, ax = plt.subplots()\n        ax.plot(data[\"Fecha\"], data[\"Tmax\"], marker=\"o\", color=\"red\")\n        ax.set_title(f\"Temperatura M\u00e1xima - {input.station_selected()}\")\n        ax.set_xlabel(\"Fecha\")\n        ax.set_ylabel(\"Temperatura M\u00e1xima (\u00b0C)\")\n        plt.xticks(rotation=45)\n        return fig\n\n    @output\n    @render.plot\n    def plot_tmin():\n        data = df()\n        fig, ax = plt.subplots()\n        ax.plot(data[\"Fecha\"], data[\"Tmin\"], marker=\"o\", color=\"cyan\")\n        ax.set_title(f\"Temperatura M\u00ednima - {input.station_selected()}\")\n        ax.set_xlabel(\"Fecha\")\n        ax.set_ylabel(\"Temperatura M\u00ednima (\u00b0C)\")\n        plt.xticks(rotation=45)\n        return fig\n\n# --------------------------\n# App\napp = App(app_ui, server)\n", "type": "text"}, {"name": "README.md", "content": "# ShinYP4", "type": "text"}, {"name": "basic-app/app.py", "content": "from shiny import render, ui\nfrom shiny.express import input\n\nui.panel_title(\"Hello Shiny!\")\nui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\n@render.text\ndef txt():\n    return f\"n*2 is {input.n() * 2}\"\n", "type": "text"}]